{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "$ref": "#/definitions/DealerExecuteMsg"
    },
    {
      "$ref": "#/definitions/MigratableExecuteMsg"
    },
    {
      "$ref": "#/definitions/MigrationListenerExecuteMsg"
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "ContractInfo": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "default": "",
          "type": "string"
        }
      }
    },
    "DealerExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "purchase_mint"
          ],
          "properties": {
            "purchase_mint": {
              "type": "object"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MigratableExecuteMsg": {
      "oneOf": [
        {
          "description": "Set migration secret (using entropy for randomness), and the address of the new contract",
          "type": "object",
          "required": [
            "migrate"
          ],
          "properties": {
            "migrate": {
              "type": "object",
              "required": [
                "admin_permit",
                "migrate_to"
              ],
              "properties": {
                "admin_permit": {
                  "description": "permit used to verify address executing migration is admin",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Permit_for_TokenPermissions"
                    }
                  ]
                },
                "migrate_to": {
                  "$ref": "#/definitions/MigrateTo"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Sets a contract that should be notified when this contract completes the migration process",
          "type": "object",
          "required": [
            "register_to_notify_on_migration_complete"
          ],
          "properties": {
            "register_to_notify_on_migration_complete": {
              "type": "object",
              "required": [
                "address",
                "code_hash"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "code_hash": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MigrateTo": {
      "type": "object",
      "required": [
        "address",
        "code_hash",
        "entropy"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "code_hash": {
          "type": "string"
        },
        "entropy": {
          "type": "string"
        }
      }
    },
    "MigrationListenerExecuteMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "migration_complete_notification"
          ],
          "properties": {
            "migration_complete_notification": {
              "type": "object",
              "required": [
                "from"
              ],
              "properties": {
                "from": {
                  "$ref": "#/definitions/ContractInfo"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "PermitParams_for_TokenPermissions": {
      "type": "object",
      "required": [
        "allowed_tokens",
        "chain_id",
        "permissions",
        "permit_name"
      ],
      "properties": {
        "allowed_tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chain_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPermissions"
          }
        },
        "permit_name": {
          "type": "string"
        }
      }
    },
    "PermitSignature": {
      "type": "object",
      "required": [
        "pub_key",
        "signature"
      ],
      "properties": {
        "pub_key": {
          "$ref": "#/definitions/PubKey"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Permit_for_TokenPermissions": {
      "type": "object",
      "required": [
        "params",
        "signature"
      ],
      "properties": {
        "params": {
          "$ref": "#/definitions/PermitParams_for_TokenPermissions"
        },
        "signature": {
          "$ref": "#/definitions/PermitSignature"
        }
      }
    },
    "PubKey": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "description": "ignored, but must be \"tendermint/PubKeySecp256k1\" otherwise the verification will fail",
          "type": "string"
        },
        "value": {
          "description": "Secp256k1 PubKey",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "TokenPermissions": {
      "oneOf": [
        {
          "description": "Allowance for SNIP-20 - Permission to query allowance of the owner & spender",
          "type": "string",
          "enum": [
            "allowance"
          ]
        },
        {
          "description": "Balance for SNIP-20 - Permission to query balance",
          "type": "string",
          "enum": [
            "balance"
          ]
        },
        {
          "description": "History for SNIP-20 - Permission to query transfer_history & transaction_hisotry",
          "type": "string",
          "enum": [
            "history"
          ]
        },
        {
          "description": "Owner permission indicates that the bearer of this permit should be granted all the access of the creator/signer of the permit.  SNIP-721 uses this to grant viewing access to all data that the permit creator owns and is whitelisted for. For SNIP-721 use, a permit with Owner permission should NEVER be given to anyone else.  If someone wants to share private data, they should whitelist the address they want to share with via a SetWhitelistedApproval tx, and that address will view the data by creating their own permit with Owner permission",
          "type": "string",
          "enum": [
            "owner"
          ]
        }
      ]
    }
  }
}
