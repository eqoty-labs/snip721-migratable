{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "oneOf": [
    {
      "description": "initialize using data from another contract",
      "type": "object",
      "required": [
        "migrate"
      ],
      "properties": {
        "migrate": {
          "$ref": "#/definitions/InstantiateByMigrationMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "initialize fresh",
      "type": "object",
      "required": [
        "new"
      ],
      "properties": {
        "new": {
          "$ref": "#/definitions/InstantiateSelfAndChildSnip721Msg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Authentication": {
      "description": "media file authentication",
      "type": "object",
      "properties": {
        "key": {
          "description": "either a decryption key for encrypted files or a password for basic authentication",
          "type": [
            "string",
            "null"
          ]
        },
        "user": {
          "description": "username used in basic authentication",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Extension": {
      "description": "metadata extension You can add any metadata fields you need here.  These fields are based on https://docs.opensea.io/docs/metadata-standards and are the metadata fields that Stashh uses for robust NFT display.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
      "type": "object",
      "properties": {
        "animation_url": {
          "description": "url to a multimedia attachment",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "item attributes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "background_color": {
          "description": "background color represented as a six-character hexadecimal without a pre-pended #",
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "description": "item description",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "url to allow users to view the item on your site",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "url to the image",
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "description": "raw SVG image data (not recommended). Only use this if you're not including the image parameter",
          "type": [
            "string",
            "null"
          ]
        },
        "media": {
          "description": "media files as specified on Stashh that allows for basic authenticatiion and decryption keys. Most of the above is used for bridging public eth NFT metadata easily, whereas `media` will be used when minting NFTs on Stashh",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/MediaFile"
          }
        },
        "name": {
          "description": "name of the item",
          "type": [
            "string",
            "null"
          ]
        },
        "protected_attributes": {
          "description": "a select list of trait_types that are in the private metadata.  This will only ever be used in public metadata",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "token_subtype": {
          "description": "token subtypes used by Stashh for display groupings (primarily used for badges, which are specified by using \"badge\" as the token_subtype)",
          "type": [
            "string",
            "null"
          ]
        },
        "youtube_url": {
          "description": "url to a YouTube video",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "InstantiateByMigrationMsg": {
      "type": "object",
      "required": [
        "entropy",
        "migrate_from"
      ],
      "properties": {
        "entropy": {
          "type": "string"
        },
        "migrate_from": {
          "$ref": "#/definitions/MigrateFrom"
        }
      }
    },
    "InstantiateSelfAndChildSnip721Msg": {
      "type": "object",
      "required": [
        "entropy",
        "prices",
        "snip721_code_hash",
        "snip721_code_id",
        "snip721_label"
      ],
      "properties": {
        "admin": {
          "description": "optional admin address, env.message.sender if missing",
          "type": [
            "string",
            "null"
          ]
        },
        "entropy": {
          "description": "entropy used for prng seed",
          "type": "string"
        },
        "prices": {
          "description": "Allowed Coin prices for purchasing a mint",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "private_metadata": {
          "description": "optional private metadata that can only be seen by the owner and whitelist",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "public_metadata": {
          "description": "optional public metadata that can be seen by everyone",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "royalty_info": {
          "description": "optional royalty information to use as default when RoyaltyInfo is not provided to a minting function",
          "anyOf": [
            {
              "$ref": "#/definitions/RoyaltyInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "snip721_code_hash": {
          "description": "the code hash used to instantiate this contract's child snip721 contract",
          "type": "string"
        },
        "snip721_code_id": {
          "description": "the code hash used to instantiate this contract's child snip721 contract",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "snip721_label": {
          "description": "the label used to instantiate this contract's child snip721 contract",
          "type": "string"
        }
      }
    },
    "MediaFile": {
      "description": "media file",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "authentication": {
          "description": "authentication information",
          "anyOf": [
            {
              "$ref": "#/definitions/Authentication"
            },
            {
              "type": "null"
            }
          ]
        },
        "extension": {
          "description": "file extension",
          "type": [
            "string",
            "null"
          ]
        },
        "file_type": {
          "description": "file type Stashh currently uses: \"image\", \"video\", \"audio\", \"text\", \"font\", \"application\"",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "description": "url to the file.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "description": "token metadata",
      "type": "object",
      "properties": {
        "extension": {
          "description": "optional on-chain metadata.  Only use this if you are not using `token_uri`",
          "anyOf": [
            {
              "$ref": "#/definitions/Extension"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_uri": {
          "description": "optional uri for off-chain metadata.  This should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`.  Only use this if you are not using `extension`",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "MigrateFrom": {
      "type": "object",
      "required": [
        "address",
        "admin_permit",
        "code_hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "admin_permit": {
          "description": "permit for the  used to verify address executing migration is admin",
          "allOf": [
            {
              "$ref": "#/definitions/Permit_for_TokenPermissions"
            }
          ]
        },
        "code_hash": {
          "type": "string"
        }
      }
    },
    "PermitParams_for_TokenPermissions": {
      "type": "object",
      "required": [
        "allowed_tokens",
        "chain_id",
        "permissions",
        "permit_name"
      ],
      "properties": {
        "allowed_tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chain_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPermissions"
          }
        },
        "permit_name": {
          "type": "string"
        }
      }
    },
    "PermitSignature": {
      "type": "object",
      "required": [
        "pub_key",
        "signature"
      ],
      "properties": {
        "pub_key": {
          "$ref": "#/definitions/PubKey"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Permit_for_TokenPermissions": {
      "type": "object",
      "required": [
        "params",
        "signature"
      ],
      "properties": {
        "params": {
          "$ref": "#/definitions/PermitParams_for_TokenPermissions"
        },
        "signature": {
          "$ref": "#/definitions/PermitSignature"
        }
      }
    },
    "PubKey": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "description": "ignored, but must be \"tendermint/PubKeySecp256k1\" otherwise the verification will fail",
          "type": "string"
        },
        "value": {
          "description": "Secp256k1 PubKey",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "Royalty": {
      "description": "data for a single royalty",
      "type": "object",
      "required": [
        "rate",
        "recipient"
      ],
      "properties": {
        "rate": {
          "description": "royalty rate",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "recipient": {
          "description": "address to send royalties to",
          "type": "string"
        }
      }
    },
    "RoyaltyInfo": {
      "description": "all royalty information",
      "type": "object",
      "required": [
        "decimal_places_in_rates",
        "royalties"
      ],
      "properties": {
        "decimal_places_in_rates": {
          "description": "decimal places in royalty rates",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "royalties": {
          "description": "list of royalties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Royalty"
          }
        }
      }
    },
    "TokenPermissions": {
      "oneOf": [
        {
          "description": "Allowance for SNIP-20 - Permission to query allowance of the owner & spender",
          "type": "string",
          "enum": [
            "allowance"
          ]
        },
        {
          "description": "Balance for SNIP-20 - Permission to query balance",
          "type": "string",
          "enum": [
            "balance"
          ]
        },
        {
          "description": "History for SNIP-20 - Permission to query transfer_history & transaction_hisotry",
          "type": "string",
          "enum": [
            "history"
          ]
        },
        {
          "description": "Owner permission indicates that the bearer of this permit should be granted all the access of the creator/signer of the permit.  SNIP-721 uses this to grant viewing access to all data that the permit creator owns and is whitelisted for. For SNIP-721 use, a permit with Owner permission should NEVER be given to anyone else.  If someone wants to share private data, they should whitelist the address they want to share with via a SetWhitelistedApproval tx, and that address will view the data by creating their own permit with Owner permission",
          "type": "string",
          "enum": [
            "owner"
          ]
        }
      ]
    },
    "Trait": {
      "description": "attribute trait",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "display_type": {
          "description": "indicates how a trait should be displayed",
          "type": [
            "string",
            "null"
          ]
        },
        "max_value": {
          "description": "optional max value for numerical traits",
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "description": "name of the trait",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "trait value",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
