{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "oneOf": [
    {
      "description": "initialize using data from another contract",
      "type": "object",
      "required": [
        "migrate"
      ],
      "properties": {
        "migrate": {
          "$ref": "#/definitions/InstantiateByMigrationMsg"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "initialize fresh",
      "type": "object",
      "required": [
        "new"
      ],
      "properties": {
        "new": {
          "$ref": "#/definitions/InstantiateMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "InstantiateByMigrationMsg": {
      "type": "object",
      "required": [
        "entropy",
        "migrate_from"
      ],
      "properties": {
        "entropy": {
          "type": "string"
        },
        "migrate_from": {
          "$ref": "#/definitions/MigrateFrom"
        }
      }
    },
    "InstantiateConfig": {
      "description": "This type represents optional configuration values. All values are optional and have defaults which are more private by default, but can be overridden if necessary",
      "type": "object",
      "properties": {
        "enable_burn": {
          "description": "Indicates whether burn functionality should be enabled default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_sealed_metadata": {
          "description": "indicates whether sealed metadata should be enabled.  If sealed metadata is enabled, the private metadata is not viewable by anyone, not even the owner, until the owner calls the Reveal function.  When Reveal is called, the sealed metadata is irreversibly moved to the public metadata (as default).  if unwrapped_metadata_is_private is set to true, it will remain as private metadata, but the owner will now be able to see it.  Anyone will be able to query the token to know that it has been unwrapped.  This simulates buying/selling a wrapped card that no one knows which card it is until it is unwrapped. If sealed metadata is not enabled, all tokens are considered unwrapped default:  False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "minter_may_update_metadata": {
          "description": "indicates whether a minter is permitted to update a token's metadata default: True",
          "type": [
            "boolean",
            "null"
          ]
        },
        "owner_may_update_metadata": {
          "description": "indicates whether the owner of a token is permitted to update a token's metadata default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "public_owner": {
          "description": "indicates whether token ownership is public or private.  A user can still change whether the ownership of their tokens is public or private default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "public_token_supply": {
          "description": "indicates whether the token IDs and the number of tokens controlled by the contract are public.  If the token supply is private, only minters can view the token IDs and number of tokens controlled by the contract default: False",
          "type": [
            "boolean",
            "null"
          ]
        },
        "unwrapped_metadata_is_private": {
          "description": "indicates if the Reveal function should keep the sealed metadata private after unwrapping This config value is ignored if sealed metadata is not enabled default: False",
          "type": [
            "boolean",
            "null"
          ]
        }
      }
    },
    "InstantiateMsg": {
      "description": "Instantiation message",
      "type": "object",
      "required": [
        "entropy",
        "name",
        "symbol"
      ],
      "properties": {
        "admin": {
          "description": "optional admin address, env.message.sender if missing",
          "type": [
            "string",
            "null"
          ]
        },
        "config": {
          "description": "optional privacy configuration for the contract",
          "anyOf": [
            {
              "$ref": "#/definitions/InstantiateConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "entropy": {
          "description": "entropy used for prng seed",
          "type": "string"
        },
        "name": {
          "description": "name of token contract",
          "type": "string"
        },
        "post_init_callback": {
          "description": "optional callback message to execute after instantiation.  This will most often be used to have the token contract provide its address to a contract that instantiated it, but it could be used to execute any contract",
          "anyOf": [
            {
              "$ref": "#/definitions/PostInstantiateCallback"
            },
            {
              "type": "null"
            }
          ]
        },
        "royalty_info": {
          "description": "optional royalty information to use as default when RoyaltyInfo is not provided to a minting function",
          "anyOf": [
            {
              "$ref": "#/definitions/RoyaltyInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "symbol": {
          "description": "token contract symbol",
          "type": "string"
        }
      }
    },
    "MigrateFrom": {
      "type": "object",
      "required": [
        "address",
        "admin_permit",
        "code_hash"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "admin_permit": {
          "description": "permit for the  used to verify address executing migration is admin",
          "allOf": [
            {
              "$ref": "#/definitions/Permit_for_TokenPermissions"
            }
          ]
        },
        "code_hash": {
          "type": "string"
        }
      }
    },
    "PermitParams_for_TokenPermissions": {
      "type": "object",
      "required": [
        "allowed_tokens",
        "chain_id",
        "permissions",
        "permit_name"
      ],
      "properties": {
        "allowed_tokens": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "chain_id": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TokenPermissions"
          }
        },
        "permit_name": {
          "type": "string"
        }
      }
    },
    "PermitSignature": {
      "type": "object",
      "required": [
        "pub_key",
        "signature"
      ],
      "properties": {
        "pub_key": {
          "$ref": "#/definitions/PubKey"
        },
        "signature": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "Permit_for_TokenPermissions": {
      "type": "object",
      "required": [
        "params",
        "signature"
      ],
      "properties": {
        "params": {
          "$ref": "#/definitions/PermitParams_for_TokenPermissions"
        },
        "signature": {
          "$ref": "#/definitions/PermitSignature"
        }
      }
    },
    "PostInstantiateCallback": {
      "description": "info needed to perform a callback message after instantiation",
      "type": "object",
      "required": [
        "code_hash",
        "contract_address",
        "msg",
        "send"
      ],
      "properties": {
        "code_hash": {
          "description": "code hash of the contract to execute",
          "type": "string"
        },
        "contract_address": {
          "description": "address of the contract to execute",
          "type": "string"
        },
        "msg": {
          "description": "the callback message to execute",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        },
        "send": {
          "description": "list of native Coin to send with the callback message",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      }
    },
    "PubKey": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "description": "ignored, but must be \"tendermint/PubKeySecp256k1\" otherwise the verification will fail",
          "type": "string"
        },
        "value": {
          "description": "Secp256k1 PubKey",
          "allOf": [
            {
              "$ref": "#/definitions/Binary"
            }
          ]
        }
      }
    },
    "Royalty": {
      "description": "data for a single royalty",
      "type": "object",
      "required": [
        "rate",
        "recipient"
      ],
      "properties": {
        "rate": {
          "description": "royalty rate",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "recipient": {
          "description": "address to send royalties to",
          "type": "string"
        }
      }
    },
    "RoyaltyInfo": {
      "description": "all royalty information",
      "type": "object",
      "required": [
        "decimal_places_in_rates",
        "royalties"
      ],
      "properties": {
        "decimal_places_in_rates": {
          "description": "decimal places in royalty rates",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "royalties": {
          "description": "list of royalties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Royalty"
          }
        }
      }
    },
    "TokenPermissions": {
      "oneOf": [
        {
          "description": "Allowance for SNIP-20 - Permission to query allowance of the owner & spender",
          "type": "string",
          "enum": [
            "allowance"
          ]
        },
        {
          "description": "Balance for SNIP-20 - Permission to query balance",
          "type": "string",
          "enum": [
            "balance"
          ]
        },
        {
          "description": "History for SNIP-20 - Permission to query transfer_history & transaction_hisotry",
          "type": "string",
          "enum": [
            "history"
          ]
        },
        {
          "description": "Owner permission indicates that the bearer of this permit should be granted all the access of the creator/signer of the permit.  SNIP-721 uses this to grant viewing access to all data that the permit creator owns and is whitelisted for. For SNIP-721 use, a permit with Owner permission should NEVER be given to anyone else.  If someone wants to share private data, they should whitelist the address they want to share with via a SetWhitelistedApproval tx, and that address will view the data by creating their own permit with Owner permission",
          "type": "string",
          "enum": [
            "owner"
          ]
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
