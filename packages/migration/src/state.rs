use cosmwasm_std::{Binary, ContractInfo};
use serde::{Deserialize, Serialize};

/// key for MigratedFrom singleton
pub static MIGRATED_FROM_KEY: &[u8] = b"migratedFrom";
/// key for MigratedTo singleton
pub static MIGRATED_TO_KEY: &[u8] = b"migratedTo";
/// key for the ContractInfo of a contract to notify when this contract has been migrated
pub static NOTIFY_OF_MIGRATION_RECEIVER_KEY: &[u8; 16] = b"notifyOnMigrated";
/// key for current ContractMode
pub const CONTRACT_MODE_KEY: &[u8] = b"contractMode";


#[derive(serde_repr::Serialize_repr, serde_repr::Deserialize_repr, Debug, PartialEq)]
#[repr(u8)]
pub enum ContractMode {
    MigrateDataIn = 1,
    Running = 2,
    MigratedOut = 3,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MigratedFromState {
    /// the info of the contract being migrated from
    pub contract: ContractInfo,
    /// the secret generated by the contract being migrated from
    pub migration_secret: Binary,
}

#[derive(Serialize, Deserialize, Clone, Debug, PartialEq)]
pub struct MigratedToState {
    /// the info of the contract being migrated to
    pub contract: ContractInfo,
    /// the secret needed by another contract to migrate data out
    pub migration_secret: Binary,
}


